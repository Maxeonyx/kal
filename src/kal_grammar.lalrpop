use crate::ast::*;
use std::collections::HashMap;
use std::str::FromStr;

grammar;

// Macro for making comma-separated lists of anything
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        },
    },
};

Block: Block = {
	"{" <b:BlockInnerNotEmpty> "}" => b,
};

// kal files are "block inners".
// Essentially they are zero parameter functions
pub BlockInner: Block = {
    // allow empty files/functions/blocks
    => {
        Block {
            statements: Vec::new(),
            expression: Box::new(Expression::Literal(Literal::Null)),
        }
    },
    <v:(<Statement> ";")*> <e:Expression> => {
        Block {
            statements: v,
            expression: Box::new(e),
        }
    }
}

// Blocks do not allow the block to be empty. This means that curly braces are empty objects instead.
pub BlockInnerNotEmpty: Block = {
    <v:(<Statement> ";")*> <e:Expression> => {
        Block {
            statements: v,
            expression: Box::new(e),
        }
    }
}

Statement: Statement = {
    <le:LetStatement> => Statement::Let(le),
}

// Function literal is highest operator precedence.
Expression: Expression = {
    <fl:FunctionLiteral> => Expression::Literal(Literal::Function(fl)),
    ComparisonExpression,
}

ComparisonExpression: Expression = {
    <l:ComparisonExpression> <o:ComparisonOperator> <r:AddExpression> => 
    Expression::Comparison(ComparisonExpression {
        left: Box::new(l),
        right: Box::new(r),
        operator: o,
    }),
    AddExpression,
}

ComparisonOperator: ComparisonOperator = {
    "==" => ComparisonOperator::Equal,
    "<=" => ComparisonOperator::LessEqual,
    "<" => ComparisonOperator::Less,
    ">=" => ComparisonOperator::GreaterEqual,
    ">" => ComparisonOperator::Greater,
}

AddExpression: Expression = {
    <l:AddExpression> "+" <r:MultiplyExpression> =>
        Expression::Numeric(NumericExpression {
            left: Box::new(l),
            right: Box::new(r),
            operator: NumericOperator::Add,
        }),
    <l:AddExpression> "-" <r:MultiplyExpression> =>
        Expression::Numeric(NumericExpression {
            left: Box::new(l),
            right: Box::new(r),
            operator: NumericOperator::Subtract,
        }),
    MultiplyExpression,
}

MultiplyExpression: Expression = {
    <l:MultiplyExpression> "*" <r:NormalExpression> =>
        Expression::Numeric(NumericExpression {
            left: Box::new(l),
            right: Box::new(r),
            operator: NumericOperator::Multiply,
        }),
    <l:MultiplyExpression> "/" <r:NormalExpression> =>
        Expression::Numeric(NumericExpression {
            left: Box::new(l),
            right: Box::new(r),
            operator: NumericOperator::Divide,
        }),
    NormalExpression,
}

NormalExpression: Expression = {
    <l:Literal> => Expression::Literal(l),
    <ie:IfExpression> => Expression::If(ie),
    SimpleExpression,
}

SimpleExpression: Expression = {
    <i:Ident> => Expression::Ident(i),
    <fi:FunctionInvocation> => Expression::FunctionInvocation(fi),
    <pe:ParenExpression> => pe,
}

ParenExpression: Expression = {
    "(" <e:Expression> ")" => e,
}

FunctionLiteral: Function = {
    "fn" "(" <p:Comma<Ident>> ")" <b:FunctionBody> =>
    Function {
        parameters: p,
        body: b,
    },
}

FunctionBody: Block = {
    <e: Expression> => Block {
        statements: Vec::new(),
        expression: Box::new(e),
    },
    <b: Block> => b,
}

LetStatement: LetStatement = {
    "let" <i:Ident> "=" <e:Expression> =>
    LetStatement {
        variable: i,
        expr: Box::new(e),
    },
}

IfExpression: IfExpression = {
    "if" <c:Expression> <b:Block> <eb:ElseBody?> =>
    
    IfExpression {
        cond: Box::new(c),
        body: b,
        else_body: eb
    },
}

ElseBody: Block = {
    "else" <b:Block> => b,
}

FunctionInvocation: FunctionInvocation = {
    <se:SimpleExpression> "(" <v:Comma<Expression>> ")" => 
    
    FunctionInvocation {
        closure_expression: Box::new(se),
        parameters: v,
    },
}

Literal: Literal = {
    "null" => Literal::Null,
    "true" => Literal::Bool(true),
    "false" => Literal::Bool(false),
    <n:Int> => Literal::Int(n),
    //<s:Str> => Literal::String(s),
    <l:List> => Literal::List(l),
    <o:Object> => Literal::Object(o),
}

List: ListLiteral = {
    "[" <v:Comma<Expression>> "]" =>
    
    ListLiteral {
        elements: v,
    },
}

Object: ObjectLiteral = {
    "{" <v:Comma<ObjectKV>> "}" =>
    
    {
        let mut h = HashMap::new();
        for (i, e) in v {
            h.insert(i, e);
        }

        ObjectLiteral {
            map: h,
        }
    },
}

ObjectKV: (Ident, Expression) = {
    <i:Ident> ":" <e:Expression> => (i, e),
}

Ident: Ident = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> =>
    
    Ident {
        name: s.to_owned(),
    },
}

Int: i64 = {
    // `unwrap` todo convert to fallible operation (e.g. Int or TooLong)
    <i:r"0|(?:[1-9][0-9]*)"> => i64::from_str(<>).unwrap(),
}
