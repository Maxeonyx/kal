use crate::ast::*;
use std::str::FromStr;
use std::rc::Rc;

grammar;

// Macro for making comma-separated lists of anything
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        },
    },
};

Block: Rc<Block> = {
	"{" <b:BlockInnerNotEmpty> "}" => b,
};

// kal files are "block inners".
// Essentially they are zero parameter functions
// We explicitly allow empty files.
pub BlockInner: Rc<Block> = {
    =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: None,
        }),
    <expr:Expression> =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: Some(expr),
        }),
    <v:(<Statement> ";")+> <e:Expression?> =>
        Rc::new(Block {
            statements: v,
            expression: e,
        }),
}

// Blocks do not allow the block to be empty. This means that lone curly braces are empty objects instead.
pub BlockInnerNotEmpty: Rc<Block> = {
    <e:Expression> =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: Some(e),
        }),
    <v:(<Statement> ";")+> <e:Expression?> =>
        Rc::new(Block {
            statements: v,
            expression: e,
        }),
}

Statement: Rc<dyn Statement> = {
    <le:LetStatement> => le,
    <a:Assignment> => a,
    <e:Expression> => e.into_statement(),
}

// Function literal is highest operator precedence.
Expression: Rc<dyn Expression> = {
    <f:Function> => f,
    <s:SendExpr> => s,
    <r:Resume> => r,
    <h:Handle> => h,
    BooleanExpression,
}

BooleanExpression: Rc<dyn Expression> = {
    <left:BooleanExpression> <operator:BooleanOperator> <right:ComparisonExpression> =>
        Rc::new(BooleanExpression {
            left,
            right,
            operator,
        }),
    NotExpression,
}

BooleanOperator: BooleanOperator = {
    "and" => BooleanOperator::And,
    "or" => BooleanOperator::Or,
    "xor" => BooleanOperator::Xor,
}

NotExpression: Rc<dyn Expression> = {
    "not" <expr:NotExpression> =>
        Rc::new(NotExpression {
            expr,
        }),
    ComparisonExpression,
}

ComparisonExpression: Rc<dyn Expression> = {
    <left:ComparisonExpression> <operator:ComparisonOperator> <right:AddExpression> =>
        Rc::new(ComparisonExpression {
            left,
            right,
            operator,
        }),
    AddExpression,
}

ComparisonOperator: ComparisonOperator = {
    "==" => ComparisonOperator::Equal,
    "!=" => ComparisonOperator::NotEqual,
    "<=" => ComparisonOperator::LessEqual,
    "<" => ComparisonOperator::Less,
    ">=" => ComparisonOperator::GreaterEqual,
    ">" => ComparisonOperator::Greater,
}

AddExpression: Rc<dyn Expression> = {
    <left:AddExpression> "+" <right:MultiplyExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Add,
        }),
    <left:AddExpression> "-" <right:MultiplyExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Subtract,
        }),
    MultiplyExpression,
}

MultiplyExpression: Rc<dyn Expression> = {
    <left:MultiplyExpression> "*" <right:NormalExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Multiply,
        }),
    <left:MultiplyExpression> "/" <right:NormalExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Divide,
        }),
    NegativeExpression,
}

NegativeExpression: Rc<dyn Expression> = {
    "-" <expr:NormalExpression> =>
        Rc::new(NegativeExpression {
            expr,
        }),
    NormalExpression,
}

NormalExpression: Rc<dyn Expression> = {
    <l:Literal> => l,
    <i:IfExpression> => i,
    SimpleExpression,
}

SimpleExpression: Rc<dyn Expression> = {
    <i:Ident> => Rc::new(i),
    <fi:FunctionInvocation> => fi,
    <de:DotExpression> => de,
    <ie:IndexExpression> => ie,
    <pe:ParenExpression> => pe,
}

DotExpression: Rc<DotExpression> = {
    <base:SimpleExpression> "." <prop:Ident> =>
        Rc::new(DotExpression {
            base,
            prop,
        }),
}

IndexExpression: Rc<IndexExpression> = {
    <base:SimpleExpression> "[" <index:Expression> "]" =>
        Rc::new(IndexExpression {
            base,
            index,
        }),
}

ParenExpression: Rc<dyn Expression> = {
    "(" <e:Expression> ")" => e,
}

Function: Rc<Function> = {
    "fn" "(" <parameters:Comma<Ident>> ")" <body:FunctionBody> =>
    Rc::new(Function {
        parameters,
        body,
    }),
}

FunctionBody: Rc<Block> = {
    <e: Expression> =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: Some(e),
        }),
    <b: Block> => b,
}

LetStatement: Rc<LetStatement> = {
    "let" <ident:Ident> "=" <expr:Expression> =>
    Rc::new(LetStatement {
        ident,
        expr,
    }),
}

Mut: bool = {
    => false,
    "mut" => true,
}

Assignment: Rc<Assignment> = {
    <location:Location> "=" <expr:Expression> =>
        Rc::new(Assignment {
            location,
            expr,
        }),
}

Location: String = {
    <i:Ident> => i,
}

IfExpression: Rc<IfExpression> = {
    "if" <cond:Expression> <body:Block> <else_ifs:ElseIf*> <else_body:ElseBody?> =>
    {
        let mut ifs = else_ifs;
        ifs.insert(0, IfPart {
            cond,
            body,
        });
        Rc::new(IfExpression {
            ifs,
            else_body,
        })
    },
}

ElseIf: IfPart = {
    "else" "if" <cond:Expression> <body:Block> =>
        IfPart {
            cond,
            body,
        },
}

ElseBody: Rc<Block> = {
    "else" <b:Block> => b,
}

FunctionInvocation: Rc<FunctionInvocation> = {
    <base:SimpleExpression> "(" <parameters:Comma<Expression>> ")" =>
        Rc::new(FunctionInvocation {
            base,
            parameters,
        }),
}

Literal: Rc<dyn Expression> = {
    "null" => Rc::new(Null),
    "true" => Rc::new(Bool(true)),
    "false" => Rc::new(Bool(false)),
    "symbol" => Rc::new(Symbol),
    <n:Int> => Rc::new(Int(n)),
    //<s:Str> => Literal::String(s),
    <l:List> => l,
    <o:Object> => o,
}

List: Rc<List> = {
    "[" <elements:Comma<ListElem>> "]" =>
        Rc::new(List {
            elements,
        }),
}

ListElem: ListElem = {
    <e:Expression> => ListElem::Elem(e),
    "..." <e:SimpleExpression> => ListElem::Spread(e),
}

Object: Rc<Object> = {
    "{" <pairs:Comma<ObjectKV>> "}" =>
        Rc::new(Object {
            pairs,
        }),
}

ObjectKV: (String, Rc<dyn Expression>) = {
    <i:Ident> ":" <e:Expression> => (i, e),
}

Ident: String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_owned(),
}

Int: i64 = {
    // `unwrap` todo convert to fallible operation (e.g. Int or TooLong)
    <i:r"0|(?:[1-9][_0-9]*)"> => {
        let string = i.to_string();
        let string = i.replace("_", "");
        i64::from_str(&string).unwrap()
    }
}


Handle: Rc<Handle> = {
    "handle" <expr:FunctionInvocation> "{" <match_arms:Comma<HandleMatch>> "}" =>
        Rc::new(Handle {
            expr,
            match_arms,
        }),
}

HandleMatch: HandleMatch = {
    <symbol:Ident> <param:Ident> <block:Block> =>
        HandleMatch {
            symbol,
            param,
            block,
        },
}

SendExpr: Rc<SendExpr> = {
    "send" <symbol:Ident> <expr:Expression> =>
        Rc::new(SendExpr {
            symbol,
            expr,
        }),
}

Resume: Rc<Resume> = {
    "resume" <expr:Expression> =>
        Rc::new(Resume {
            expr,
        }),
}
